<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Socket.IO Events</title>
    <style>
      body{
        padding: 25px;
      }
        table {
            width: 80%;
            border-collapse: collapse;
            margin: 20px 0;
        }
        th, td {
            padding: 12px;
            text-align: left;
            border: 1px solid #ddd;
        }
        th {
            background-color: #f4f4f4;
        }
        pre {
            background-color: #f4f4f4;
            padding: 10px;
            border-radius: 5px;
            white-space: pre-wrap;
            word-wrap: break-word;
        }
    </style>
</head>
<body>

<h2>Socket.IO Events</h2>

<table>
    <thead>
        <tr>
            <th>Event Name</th>
            <th>Description</th>
            <th>Payload Example</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>joinChat</td>
            <td>Joins a chat room and fetches the chat history</td>
            <td>
                <pre>
socket.emit('joinChat', { chatId: "6741e9df10ec6f46efb8f046" });
                </pre>
                <p><strong>Description:</strong> This event is triggered when a user joins a chat. It requests the server to send the chat history back to the client.</p>
            </td>
        </tr>
        <tr>
            <td>sendMessage</td>
            <td>Sends a new message to the chat room</td>
            <td>
                <pre>
const message = {
  sender: currentUser?.data?._id,
  content: messageInput
};
socket.emit('sendMessage', chatId, message);
                </pre>
                <p><strong>Description:</strong> This event is triggered to send a new message to a specific chat room. The message includes the sender's ID and content.</p>
            </td>
        </tr>
        <tr>
            <td>updateMessage</td>
            <td>Updates a specific message's content in the chat</td>
            <td>
                <pre>
const updatedContent = {
  ...content,
  action_done: true, // Example update
  counter_price: counterPrice,
  counter_description: counterDescription
};
socket.emit('updateMessage', chatId, messageKey, updatedContent);
                </pre>
                <p><strong>Description:</strong> This event updates a message's content in a chat. The event requires the message's key (ID), the chat ID, and the new content.</p>
            </td>
        </tr>
        <tr>
            <td>chatHistory</td>
            <td>Sends the chat history after joining a chat</td>
            <td>
                <pre>
socket.on('chatHistory', (messages) => {
  console.log(messages);
  setMessages(messages); // Display the fetched chat history
});
                </pre>
                <p><strong>Description:</strong> This event sends the entire chat history back to the client once a user joins the chat.</p>
            </td>
        </tr>
        <tr>
            <td>messageUpdated</td>
            <td>Sends the updated message to all participants in the chat</td>
            <td>
                <pre>
socket.on('messageUpdated', (data) => {
  console.log('Message Updated:', data);
  // Handle the updated message here
});
                </pre>
                <p><strong>Description:</strong> This event is triggered when a message is updated. All participants in the chat receive the updated message content.</p>
            </td>
        </tr>
        <tr>
            <td>disconnect</td>
            <td>Logs when a user disconnects from the chat server</td>
            <td>
                <pre>
socket.on('disconnect', () => {
  console.log('A user disconnected');
});
                </pre>
                <p><strong>Description:</strong> This event is triggered when a user disconnects from the server. It is handled automatically by the server but can be listened to if needed.</p>
            </td>
        </tr>
    </tbody>
</table>

</body>
</html>
